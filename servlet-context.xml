<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<resources mapping="/photos/**" location="/photos/"></resources>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="contentType" value="UTF-8" />
		<beans:property name="order" value="2" />
	</beans:bean>
	
	<!-- Custom view for downloading files -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="1" />
	
	<!-- multipartResolver, to handle the data received when a file is uploaded to the server -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="defaultEncoding" value="UTF-8"></beans:property>
	</beans:bean>
	
	<beans:bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="host" value="smtp.gmail.com" />
		<beans:property name="port" value="587" />
		<!--
			Designated ports for the SMTP may be changed by the email service provider, so DOUBLE-CHECK!
			(Each provider may use a different port for the SMTP)
			
			Port 25 was the original port for the SMPT protocol, but it's rarely used nowadays
			Port 465 was one of the ports for the SMPT protocol, but it's not used much nowadays
		  -->
		<beans:property name="username" value="[이메일주소]" />
			<!-- Although it is possible to set a sender using the setFrom() method,
				 the actual sender (email address) is the value of this property "username" -->
		<beans:property name="password" value="[비밀번호]" />
		<beans:property name="defaultEncoding" value="utf-8" />
		<beans:property name="javaMailProperties">
			<!-- Additional properties required by GMAIL (other providers may differ) -->
			<beans:props>
				<beans:prop key="mail.transport.protocol">smtp</beans:prop>
				<beans:prop key="mail.smtp.auth">true</beans:prop>
				<beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
				<beans:prop key="mail.debug">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>
	
	<!-- Set up interceptors -->
<!-- 	<interceptors>
		<interceptor>
			<mapping path="/user/**" />
			<beans:bean class="com.yuriel.interceptor.AuthCheckInterceptor" />
		</interceptor>
	</interceptors> -->

	<!-- @Transactional 애너테이션 활성화 설정 -->
		<!-- "tx:annotation-driven" must be together with "context:component-scan" in the servlet-context.xml -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- Scans all packages under "com.yuriel" for beans (@Controller, @Service, @Component, etc.) -->	
	<context:component-scan base-package="com.yuriel" />
	
</beans:beans>
